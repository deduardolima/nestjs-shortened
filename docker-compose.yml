services:
  app:
    container_name: shortened
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
    ports:
      - '3000:3000'
      - '8081:8081'
    volumes:
      - .:/home/node/app
    depends_on:
      postgresDB:
        condition: service_healthy
    networks:
      - shortened-network

  postgresDB:
    image: postgres:15.7
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=shortened
      - TZ=America/Sao_Paulo
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - '5434:5432'
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-h', 'postgresDB', '-p', '5432', '-q' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - shortened-network

  pgadmin:
    container_name: pgadminShortened
    image: dpage/pgadmin4:6.15
    environment:
      PGADMIN_DEFAULT_EMAIL: dgo.eduardolima@gmail.com
      PGADMIN_DEFAULT_PASSWORD: 123456
    ports:
      - '5053:80'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgresDB
    networks:
      - shortened-network

  redis:
    image: redis:latest
    ports:
      - '6379:6379'
    networks:
      - shortened-network

  jaeger-all-in-one:
    image: jaegertracing/all-in-one:latest
    restart: always
    ports:
      - "16686:16686"
      - "14268"
      - "14250"
    networks:
      - shortened-network

  otel-collector:
    image: otel/opentelemetry-collector:latest
    restart: always
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./.docker/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"
      - "8888:8888"
      - "8889:8889"
      - "13133:13133"
      - "4317:4317"
      - "4318:4318"
    networks:
      - shortened-network

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./.docker/prometheus.yml:/etc/prometheus.yaml
    ports:
      - "9090:9090"
    networks:
      - shortened-network

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - shortened-network

networks:
  shortened-network:
    driver: bridge

volumes:
  postgres-data:
  pgadmin-data:
  grafana-data:
